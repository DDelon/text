--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Node
local Node=cc.Node:create()
Node:setName("Node")

--Create panel
local panel = ccui.Layout:create()
panel:ignoreContentAdaptWithSize(false)
panel:setClippingEnabled(false)
panel:setBackGroundColorType(1)
panel:setBackGroundColor({r = 150, g = 200, b = 255})
panel:setBackGroundColorOpacity(0)
panel:setLayoutComponentEnabled(true)
panel:setName("panel")
panel:setTag(820)
panel:setCascadeColorEnabled(true)
panel:setCascadeOpacityEnabled(true)
panel:setAnchorPoint(0.5000, 0.5000)
layout = ccui.LayoutComponent:bindLayoutComponent(panel)
layout:setPositionPercentXEnabled(true)
layout:setPositionPercentYEnabled(true)
layout:setSize({width = 374.0000, height = 400.0000})
layout:setLeftMargin(-187.0000)
layout:setRightMargin(-187.0000)
layout:setTopMargin(-200.0000)
layout:setBottomMargin(-200.0000)
Node:addChild(panel)

--Create node_fish
innerCSD = require("ui.hall.room.uiroom01")
innerProject = innerCSD.create(callBackProvider)
local node_fish = innerProject.root
node_fish.animation = innerProject.animation
node_fish:setName("node_fish")
node_fish:setTag(821)
node_fish:setCascadeColorEnabled(true)
node_fish:setCascadeOpacityEnabled(true)
node_fish:setPosition(187.0000, 200.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(node_fish)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setLeftMargin(187.0000)
layout:setRightMargin(187.0000)
layout:setTopMargin(200.0000)
layout:setBottomMargin(200.0000)
innerProject.animation:setTimeSpeed(1.0000)
node_fish:runAction(innerProject.animation)
panel:addChild(node_fish)

--Create spr_tips
local spr_tips = cc.Sprite:create("hall/hallpic/hall_pic_jqqd.png")
spr_tips:setName("spr_tips")
spr_tips:setTag(850)
spr_tips:setCascadeColorEnabled(true)
spr_tips:setCascadeOpacityEnabled(true)
spr_tips:setPosition(187.0000, 200.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(spr_tips)
layout:setPositionPercentXEnabled(true)
layout:setPositionPercentYEnabled(true)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setPercentWidth(0.6417)
layout:setPercentHeight(0.1250)
layout:setSize({width = 240.0000, height = 50.0000})
layout:setLeftMargin(67.0000)
layout:setRightMargin(67.0000)
layout:setTopMargin(175.0000)
layout:setBottomMargin(175.0000)
spr_tips:setBlendFunc({src = 1, dst = 771})
panel:addChild(spr_tips)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Node
return result;
end

return Result

