--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Node
local Node=cc.Node:create()
Node:setName("Node")

--Create spr_prop_buff
local spr_prop_buff = cc.Sprite:create("battle/friend/friendprop_buff_1.png")
spr_prop_buff:setName("spr_prop_buff")
spr_prop_buff:setTag(2162)
spr_prop_buff:setCascadeColorEnabled(true)
spr_prop_buff:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(spr_prop_buff)
layout:setSize({width = 30.0000, height = 30.0000})
layout:setLeftMargin(-15.0000)
layout:setRightMargin(-15.0000)
layout:setTopMargin(-15.0000)
layout:setBottomMargin(-15.0000)
spr_prop_buff:setBlendFunc({src = 1, dst = 771})
Node:addChild(spr_prop_buff)

--Create node_data
local node_data=cc.Node:create()
node_data:setName("node_data")
node_data:setTag(65)
node_data:setCascadeColorEnabled(true)
node_data:setCascadeOpacityEnabled(true)
node_data:setPosition(0.0000, 32.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(node_data)
layout:setTopMargin(-32.0000)
layout:setBottomMargin(32.0000)
Node:addChild(node_data)

--Create spr_prop_buff_data_bg
local spr_prop_buff_data_bg = ccui.ImageView:create()
spr_prop_buff_data_bg:ignoreContentAdaptWithSize(false)
spr_prop_buff_data_bg:loadTexture("common/layerbg/com_bg_grxx.png",0)
spr_prop_buff_data_bg:setScale9Enabled(true)
spr_prop_buff_data_bg:setCapInsets({x = 13, y = 13, width = 14, height = 14})
spr_prop_buff_data_bg:setLayoutComponentEnabled(true)
spr_prop_buff_data_bg:setName("spr_prop_buff_data_bg")
spr_prop_buff_data_bg:setTag(2163)
spr_prop_buff_data_bg:setCascadeColorEnabled(true)
spr_prop_buff_data_bg:setCascadeOpacityEnabled(true)
spr_prop_buff_data_bg:setOpacity(204)
spr_prop_buff_data_bg:setColor({r = 0, g = 0, b = 0})
layout = ccui.LayoutComponent:bindLayoutComponent(spr_prop_buff_data_bg)
layout:setPositionPercentXEnabled(true)
layout:setSize({width = 40.0000, height = 25.0000})
layout:setLeftMargin(-20.0000)
layout:setRightMargin(-20.0000)
layout:setTopMargin(-12.5000)
layout:setBottomMargin(-12.5000)
node_data:addChild(spr_prop_buff_data_bg)

--Create txt_prop_buff_data
local txt_prop_buff_data = ccui.Text:create()
txt_prop_buff_data:ignoreContentAdaptWithSize(true)
txt_prop_buff_data:setTextAreaSize({width = 0, height = 0})
txt_prop_buff_data:setFontSize(20)
txt_prop_buff_data:setString([[60s]])
txt_prop_buff_data:setTextHorizontalAlignment(1)
txt_prop_buff_data:setTextVerticalAlignment(1)
txt_prop_buff_data:setLayoutComponentEnabled(true)
txt_prop_buff_data:setName("txt_prop_buff_data")
txt_prop_buff_data:setTag(2164)
txt_prop_buff_data:setCascadeColorEnabled(true)
txt_prop_buff_data:setCascadeOpacityEnabled(true)
txt_prop_buff_data:setTextColor({r = 255, g = 0, b = 0})
layout = ccui.LayoutComponent:bindLayoutComponent(txt_prop_buff_data)
layout:setPositionPercentXEnabled(true)
layout:setSize({width = 30.0000, height = 20.0000})
layout:setLeftMargin(-15.0000)
layout:setRightMargin(-15.0000)
layout:setTopMargin(-10.0000)
layout:setBottomMargin(-10.0000)
node_data:addChild(txt_prop_buff_data)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Node
return result;
end

return Result

